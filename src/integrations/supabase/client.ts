
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://erhkxltscmezrsnpwygd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVyaGt4bHRzY21lenJzbnB3eWdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1MjUzMzUsImV4cCI6MjA2MDEwMTMzNX0.Tks0g_4mWlRJ_QiZL9E-TI9ShkBxBeEhlW-F_bpg6eo";

// Cr√©er une instance Supabase
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Fonctions utilitaires pour interagir avec Supabase
export const supabaseClient = {
  // Auth helpers
  auth: {
    signUp: async (email: string, password: string, metadata?: object) => {
      return await supabase.auth.signUp({ 
        email, 
        password, 
        options: { data: metadata } 
      });
    },
    signIn: async (email: string, password: string) => {
      return await supabase.auth.signInWithPassword({ email, password });
    },
    signOut: async () => {
      return await supabase.auth.signOut();
    },
    getCurrentUser: async () => {
      return await supabase.auth.getUser();
    },
    getSession: async () => {
      return await supabase.auth.getSession();
    },
    resetPassword: async (email: string) => {
      return await supabase.auth.resetPasswordForEmail(email);
    }
  },
  
  // Storage helpers
  storage: {
    uploadFile: async (bucket: string, path: string, file: File) => {
      return await supabase.storage.from(bucket).upload(path, file);
    },
    getPublicUrl: (bucket: string, path: string) => {
      return supabase.storage.from(bucket).getPublicUrl(path);
    },
    deleteFile: async (bucket: string, path: string) => {
      return await supabase.storage.from(bucket).remove([path]);
    }
  }
};
